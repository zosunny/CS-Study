# 쿠키와 세션

# 0. HTTP

<aside>
💡 HTTP(Hypertext Transfer Protocol)는 인터넷상에서 데이터를 주고 받기 위해 서버/클라이언트 모델을 따르는 통신규약

</aside>

## HTTP의 특징

- 비연결성 (Conectionless)
- 비상태성 (Stateless)
    
    → 서버의 자원 절약위해 모든 사용자의 요청마다 연결과 해제 과정 거침.
    
    → 따라서, 연결 상태가 유지되지도 않고 연결 해제 후 상태 정보가 저장되지 않음
    
    → **단점** : 사용자 식별이 불가능해 매 요청시마다 새로운 사용자로 인식 (ex. 로그인 상태 유지 불가능)
    

**⇒** HTTP의 비연결성과 비상태성을 보완해 서버가 클라이언트를 식별할 수 있게 해주는 것 `“쿠키”` 와 `“세션”`

# 1. 쿠키

<aside>
💡 웹 사이트 접속시 생성되는 정보를 담은 임시 파일로, 그 사이트가 사용하고 있는 서버에서 사용자의 컴퓨터에 저장하는 작은 기록 정보 파일

</aside>

- HTTP에서 클라이언트의 상태 정보를 클라이언트의 PC에 저장하였다가 필요시 정보를 참조하거나 재사용

** 브라우저마다 저장되는 쿠키는 다름 (인터넷 익스플로어에서 크롬 쿠키 사용불가)

## 쿠키 특징

- 이름, 값, 만료일(저장 기간 설정), 경로 정보로 구성
- 클라이언트에 총 300개의 쿠키를 저장할 수 있음
- 하나의 도메인 당 20개의 쿠키 가질 수 있음
- 하나의 쿠키는 4KB(4096byte)까지 저장 가능

## 쿠키 사용 목적

1. 세션 관리 : 로그인, 사용자 닉네임, 접속 시간, 장바구니 등 서버가 알아야할 정보 저장
2. 개인화 : 사용자 개개인에 적절한 페이지 보여줌
3. 트래킹 : 사용자의 행동과 패턴 분석 및 기록

## 쿠키 동작 순서

1. 클라이언트가 페이지 요청 (사용자가 웹 사이트 접근)
2. 웹 서버는 쿠키 생성
3. 생성한 쿠키에 정보 담아 HTTP 화면 반환시 함께 클라이언트에 반환
4. 이때 받은 쿠키는 클라이언트가 소유하다가(로컬 PC에 저장) 다시 서버에 요청할 때 요청과 함께 쿠키 전송
5. 동일 사이트 재방문시 클라이언트의 PC에 해당 쿠키가 있는 경우, 요청 페이지와 함께 쿠키 전송

## 쿠키 사용 예시

- ID 저장 및 로그인 상태 유지
- 일주일간 다시 보지 않기
- 최근 검색한 상품들 광고에서 추천
- 쇼핑몰 장바구니 기능

## 쿠키 단점

- 방문 웹 사이트에 대한 정보 및 개인정보 기록 → 사생활 침해
    - 해소방법 : 웹 브라우저 자체 쿠키 거부 기능 → 쿠키 본래 목적인 웹 브라우저와의 연결 지속 기능 수행 불가
- 서버가 아닌 사용자에게 저장되는 것이기에 임의 수정 및 삭제 가능, 가로채기 쉬움 → 보안 취약
    - 따라서, 쿠키에 민감 or 중요 정보 담는 것은 위험

### 이러한 쿠키의 단점을 보완해주는 것 → 세션!

- Q. 세션이 쿠키에 비해 보안도 높은 편이나, 쿠키를 사용하는 이유는?
    - 세션은 서버에 저장되고, 서버자원을 사용하기에 사용자가 많을 경우 소모되는 자원이 상당함.
        
        자원관리 차원에서 쿠키와 세션의 사용을 적절히 병행함으로써 서버 자원의 낭비를 방지하고 웹 사이트의 속도를 높일 수 있음
        

# 2. 세션

<aside>
💡 방문자가 웹 서버에 접속해 있는 하나의 상태 단위로, 웹 서버에 접속한 시점부터 상태를 일정하게 유지시키다가 웹 브라우저 종료시 연결을 끝냄

</aside>

## 세션 특징

- 웹 서버에 웹 컨테이너의 상태를 유지하기 위한 정보를 저장
- 웹 서버에 저장되는 쿠키(⇒세션쿠키)
- 브라우저를 닫거나, 서버에서 세션을 삭제한 경우에만 삭제가 됨 → 쿠키보다 보안이 좋음
- 저장 데이터에 제한이 없음(서버 용량 허용수준에서)
- 각 클라이언트 고유 세션ID 부여 → 세션ID로 클라이언트 구분해 각 클라이언트 요구에 맞는 서비스 제공

## 세션 동작 순서

1. 클라이언트가 페이지 요청 (사용자가 웹 사이트 접근)
2. 서버는 접근한 클라이언트의 Request-Header 필드인 쿠키 확인해, 클라이언트가 해당 session-id 보냈는지 확인
3. session-id가 존재하지 않으면, 서버는 session-id 생성해 클라이언트에 반환
4. 서버에서 클라이언트로 반환한 session-id를 쿠키 사용해 서버에 저장
5. 클라이언트는 재접속 시, 이 쿠키를 이용해 session-id값을 서버에 전달

## 세션 사용 예시

- 화면 이동시에도 로그인이 풀리지 않고 로그아웃하기 전까지 유지

## 세션의 사용

1. 세션의 속성 설정
    - session 객체의 setAtrribute() 메소드 사용 → 상태 유지 기능
    
    ```jsx
    session.setAttribute("id", "value");
    ```
    
2. 세션의 속성 사용
    - session 객체의 getAttribute() 메소드 사용 → 리턴 타입 Object이므로 사용 시 실제 할당된 객체 타입으로 형변환(Casting)해야 함
    
    ```jsx
    String id = (String)session.getAttribute("id");
    ```
    
3. 세션의 속성 삭제
    - session 객체의 removeAttribute() 메소드 사용
    
    ```jsx
    session.removeAttribute("id");
    ```
    
4. 세션의 모든 속성 삭제
    - session 객체의 invalidate() 메소드 사용
    
    ```jsx
    session.invalidate();
    ```
    

# 3. 쿠키와 세션의 차이

![스크린샷 2022-10-21 오후 4.41.19.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/98594fd1-00c4-49c8-a610-9058d13730a6/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-10-21_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.41.19.png)

## 쿠키와 세션 정리

- 쿠키는 자동완성 또는 팝업 일주일간 보지 않기 등 사용자의 편의를 위한 것으로 지워져도 되고, 조작되거나 가로채이더라도 문제 없는 수준의 정보들을 저장하는데 사용
- 세션은 사용자나 다른 누군가에게 노출되면 안되는 중요한 정보들을 서버안에서 다룸
- 쿠키는 노출시켜서는 안될 정보들만 다루어야 하고, 세션은 남발시 서버에 부담이 되어 과부하가 일어날 수 있기에 웹 설계시 쿠키와 세션의 사용에 대해 적절한 판단을 내려야 함

## Reference

[https://devuna.tistory.com/23](https://devuna.tistory.com/23)

[https://hahahoho5915.tistory.com/32](https://hahahoho5915.tistory.com/32)
