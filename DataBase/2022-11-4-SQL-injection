# SQL injection

<aside>
💡 해커에 의해 조작된 SQL 쿼리문이 데이터베이스에 그대로 전달되어 비정상적 명령을 실행시키는 공격 기법

</aside>

- 공격이 비교적 쉬운 편이며, 공격에 성공할 경우 큰 피해를 입힐 수 있는 공격이다.

## 공격 방법

1. `인증 우회`
    
    보통 로그인 시, 아이디와 비밀번호를 input 창에 입력하는데, 이때 다른 쿼리문을 함께 입력함으로써 데이터베이스에 옳지 않은 영향을 줄 수 있다.
    
    - 정상 sql 구문
    
    ```sql
    SELECT * FROM USER WHERE ID = "abc" AND PASSWORD = "1234";
    ```
    
    - 비정상 sql 구문
    
    ```sql
    SELECT * FROM USER WHERE ID = "abc" AND PASSWORD = "1234";
    DELETE * FROM USER WHERE ID = "1";
    ```
    
    보안이 완벽하지 않은 경우, 이처럼 비밀번호가 아이디와 일치해 True가 되고, 뒤에 작성한 DELETE 문 또한 데이터베이스에 영향을 주어 치명적인 상황이 발생할 수 있다.
    
    이 밖에도 기본 쿼리문의 WHERE 절에 OR 문을 추가해 “1” = “1” 과 같은 true 문을 작성함으로써 무조건 적용되도록 수정한 후, 데이터베이스를 마음대로 조작할 수도 있다.
    

1. `데이터 노출`
    
    시스템에서 발생하는 에러 메시지 이용해 공격.
    
    해커가 GET방식으로 동작하는 URL 쿼리 스트링을 추가해 에러를 발생시킨다.
    
    이에 해당하는 오류가 발생하면, 이를 통해 해당 웹앱의 데이터베이스 구조를 유추할 수 있고 해킹에 활용한다.
    

## 공격 종류

### 1. Error based SQL Injection

> 가장 많이 쓰이고, 대중적인 공격 기법 `논리적 에러를 이용한 SQL Injection`
> 

![스크린샷 2022-11-03 오후 3.18.26.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/34341f86-0094-420d-851a-de90e5b9dd42/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-11-03_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.18.26.png)

위 사진에서 보이는 쿼리문은 일반적으로 로그인 시 많이 사용되는 sql 구문이다. 해당 구문에서 입력 값에 대한 검증이 없음을 확인하고, 악의적인 사용자가 임의의 sql 구문을 주입했다.

주입된 내용은 ‘OR 1=1- - 로 where 절에 있는 싱글쿼더를 닫아주기 위한 싱글쿼터와 OR 1=1 구문을 이용해 where 절을 모두 참으로 만들고, - - 를 넣어줌으로써 뒤의 구문을 모두 주석 처리 했다.

결론적으로 Users 테이블에 있는 모든 정보를 조회하게 됨으로써 가장 먼저 만들어진 계정으로 로그인에 성공하게 된다. 보통은 관리자 계정을 맨 처음 만들기 때문에 관리자 계정에 로그인 할 수 있게 된다.

관리자 계정을 탈취한 악의적인 사용자는 관리자의 권한을 이용해 또 다른 2차 피해를 발생시킬 수 있게 된다.

### 2. Union based SQL Injection

> `Union 명령어를 이용한 SQL Injection`
> 

sql에서 Union 키워드는 두개의 쿼리문에 대한 결과를 통합해 하나의 테이블로 보여주게 하는 키워드다.

정상적인 쿼리문에 Union 키워드를 사용해 인젝션에 성공하면, 원하는 쿼리문을 실행할 수 있게 된다.

Union Injection 성공 조건은 2가지다. 1) Union 하는 두 테이블의 컬럼 수가 같아야하고, 2) 데이터 형이 같아야 한다.

![스크린샷 2022-11-03 오후 3.24.21.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b699365b-3255-4f74-82c3-f780505fe01f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-11-03_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.24.21.png)

위 사진에서 보이는 쿼리문은 Board 테이블에서 게시글을 검색하는 쿼리문이다. 입력값을 title과 contents 컬럼의 데이터랑 비교한 뒤 비슷한 글자가 있는 게시글을 출력한다.

이때, 입력값으로 Union 키워드와 함께 컬럼 수를 맞춰 SELECT 구문을 넣어주게 되면 두 쿼리문이 합쳐져 하나의 테이블로 보이게 된다.

현 인젝션 한 구문은 사용자의 id와 password를 요청하는 쿼리문이다. 인젝션이 성공하게 되면, 사용자의 개인정보가 게시글과 함께 화면에 보여지게 된다.

물론 패스워드를 평문으로 데이터베이스에 저장하지는 않겠으나 인젝션이 가능하다는 점에서 이미 그 이상의 보안위험에 노출되어 있음을 알 수 있다. 이 공격 또한 입력값에 대한 검증이 없기 때문에 발생된 것이다.

### 3-1. Blind SQL Injection

> Boolean based SQL
> 

Blind SQL Injection은 데이터베이스로부터 특정한 값이나 데이터를 전달받지 않고, 단순히 참과 거짓의 정보만 알 수 있을 때 사용한다.

로그인 폼에 SQL Injection이 가능하다고 가정했을 때, 서버가 응답하는 로그인 성공과 로그인 실패 메시지를 이용해 데이터베이스의 테이블 정보 등을 추출해낼 수 있다.

![스크린샷 2022-11-03 오후 3.37.57.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/580e7e69-02f7-40d3-a481-41bfbb196684/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-11-03_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.37.57.png)

인젝션이 가능한 로그인 폼을 통해 악의적인 사용자는 임의로 가입한 abc123 이라는 아이디와 함께 abc123’ and ASCII(SUBSTR(SELECT name FROM information_schema.tables WHERE table_type=’base table’ limit 0,1),1,1)) > 100 - - 이라는 구문을 주입한다.

해당 구문은 MySQL에서 테이블 명을 조회하는 구문으로 limit 키워드를 통해 하나의 테이블만 조회하고, SUBSTR 함수로 첫 글자만, 그리고 마지막으로 ASCII 통해 ascii 값으로 변환해준다.

만약, 조회되는 테이블 명이 Users 라면, ‘U’ 자가 ascii 값으로 조최가 되고, 뒤의 100이라는 숫자 값과 비교를 한다. 거짓이면 로그인 실패이고, 참이 될 때까지 뒤의 100 숫자를 변경해 가며 비교를 할 수 있다.

공격자는 이 프로세스를 자동화 스크립트를 통해 단기간 내 테이블 명을 알아 낼 수 있다.

### 3-2. Blind SQL Injection

> Time based SQL
> 

Time based SQL Injection 도 마찬가지로 서버로부터 특정한 응답 대신 참 혹인 거짓의 응답을 통해 데이터베이스의 정보를 유추하는 기법이다.

사용되는 함수는 MySQL 기준 `SLEEP` 과 `BENCHMARK` 이다.

![현재 사용하고 있는 데이터베이스 길이 알아내기](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/25640428-60bf-469d-9f33-31c6505a7960/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-11-03_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.45.27.png)

현재 사용하고 있는 데이터베이스 길이 알아내기

로그인 폼에 주입이 되었고 임의로 abc123이라는 계정을 생성해 두었다.

악의적인 사용자가 abc123’ OR (LENGTH(DATEBASE())=1 AND SLEEP(2)) - 이라는 구문을 주입했다. LENGTH는 문자열의 길이 반환, DATABASE는 데이터베이스의 이름을 반환한다.

주입된 구문에서 LENGTH(DATEBASE())=1 이 참이면 SLEEP(2) 이 동작하고, 거짓이면 동작하지 않는다.

이를 통해 숫자 1 부분을 조작하며 데이터베이스의 길이를 알아 낼 수 있다. 만약 SLEEP 단어가 치환처리되어 있다면, 또 다른 방법으로 BENCHMARK 나 WAIT 함수를 사용할 수 있다. BENCHMARK는 BENCHMARK(1000000,AES_ENCRYPT(’hello’,’goodbye’)); 이런 식으로 사용이 가능하다.

이 구문을 실행 하면 약 4,74초가 걸린다.

### 4. Stored Procedure SQL Injection

> 저장된 프로시저에서의 SQL Injection
> 

저장 프로시저(Stored Procedure)은 일련의 쿼리들을 모아 하나의 함수처럼 사용하기 위한 것이다. 공격에 사용되는 대표적인 저장 프로시저는 MS-SQL에 있는 `xp_cmdshell`로, 윈도우 명령어를 사용할 수 있게 된다.

단, 공격자가 시스템 권한을 획득해야 하므로 공격난이도가 높으나 공격에 성공한다면 서버에 직접적인 피해를 입힐 수 있는 공격이다.

### 5. Mass SQL Injection

> 다량의 SQL Injection 공격
> 

2008년에 처음 발견된 공격기법으로 기존 SQL Injection과 달리 한번의 공격으로 다량의 데이터베이스가 조작되어 큰 피해를 입히는 것을 의미한다.

보통 MS-SQL을 사용하는 ASP 기반 웹 애플리케이션에서 많이 사용되며, 쿼리문은 HEX 인코딩 방식으로 인코딩하여 공격한다.

보통 데이터베이스 값을 변조해 데이터베이스에 악성 스크립트를 삽입하고, 사용자들이 변조된 사이트에 접속 시 좀비PC로 감염되게 한다.

이렇게 감염된 좀비 PC들은 DDoS 공격에 사용된다.

## 대응방안

1. `**입력 값에 대한 검증**`
    
    서버에서 화이트리스트 기반으로 검증해야한다. (블랙리스트 기반 검증 시 수 많은 차단리스트를 등록해야 하고, 하나라도 빠지면 공격에 성공하게 되기 때문이다.) 공백으로 치환하는 방법도 많이 쓰이는데, 이 방법도 취약한 방법이다. 예를 들어 공격자가 SESELECTLECT 라고 입력시 중간의 SELECT가 공백으로 치환이 되면 SELECT 라는 키워드가 완성되기 때문에 공백 대신 공격 키워드와는 의미없는 단어로 치환되어야 한다.
    
2. `**input 값 받을 때, 특수문자 여부 검사**`
    
    로그인 전, 검증 로직을 추가해 미리 설정핝 특수문자들이 들어왔을 때 요청을 막아낸다.
    
3. `**SQL 서버 오류 발생 시, 해당하는 에러 메시지 감추기**`
    
    view를 활용해 원본 데이터베이스 테이블에는 접근 권한을 높인다. 일반 사용지는 view로만 접근해 에러 볼 수 없게 만든다.
    
4. `**Prepare Statement 구문 사용하기**`
    
    Prepares Statement 구문 사용시, 사용자의 입력 값이 데이터베이스의 파라미터로 들어가기 전에 DBMS가 미리 컴파일해 실행하지 않고 대기한다. 그 후 사용자의 입력 값을 문자열로 인식하게 해 공격쿼리가 들어간다해도 사용자의 입력은 이미 의미 없는 단순 문자열이기에 전체 쿼리문도 공격자의 의도대로 작동하지 않는다.
    
5. `**Error Message 노출 금지**`
    
    공격자가 SQL Injection을 수행하기위해서는 테이블명, 컬럼명 등 데이터베이스의 정보가 필요하다. 데이터베이스 에러 발생 시 따로 처리를 해주지 않았다면, 에러가 발생한 쿼리문과 함께 에러에 관한 내용을 반환해 준다. 여기서 테이블명 및 컬럼명 그리고 쿼리문이 노출이 될 수 있기 때문에, 데이터베이스에 대한 오류 발생 시 사용자에게 보여줄 수 있는 페이지를 제작 혹은 메시지박스를 띄우도록 해야한다.
    
6. `**웹 방화벽 사용**`
    
    웹 공격 방어에 특화되어있는 웹 방화벽을 사용하는 것도 하나의 방법이다. 웹 방화벽은 소프트웨어 형, 하드웨어 형, 프록시 형 이렇게 세가지 종류로 나눌 수 있다.
    
    - 소프트웨어 형 : 서버 내에 직접 설치하는 방법
    - 하드웨어 형 : 네트워크 상에서 서버 앞 단에 직접 하드웨어 장비로 구성
    - 프록시 형 : DNS 서버 주소를 웹 방화벽으로 바꾸고 서버로 가는 트래픽이웹 방화벽을 먼저 거치도록 하는 방법

## Reference

[https://github.com/gyoogle/tech-interview-for-developer/blob/master/Computer Science/Database/SQL Injection.md](https://github.com/gyoogle/tech-interview-for-developer/blob/master/Computer%20Science/Database/SQL%20Injection.md)

[https://noirstar.tistory.com/264](https://noirstar.tistory.com/264)
